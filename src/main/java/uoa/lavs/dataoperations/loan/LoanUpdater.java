package uoa.lavs.dataoperations.loan;

import java.sql.*;
import uoa.lavs.mainframe.Instance;
import uoa.lavs.mainframe.LoanStatus;
import uoa.lavs.mainframe.Status;
import uoa.lavs.mainframe.messages.loan.UpdateLoan;
import uoa.lavs.mainframe.messages.loan.UpdateLoanStatus;
import uoa.lavs.models.Loan;

public class LoanUpdater {

  public static void updateData(String loanId, Loan loan) {
    try {
      // Attempt to update the mainframe first
      loanId = updateMainframe(loanId, loan);
    } catch (Exception e) {
      System.out.println("Mainframe update failed: " + e.getMessage());
    } finally {
      try {
        // Always attempt to update the database
        updateDatabase(loanId, loan);
      } catch (SQLException e) {
        System.out.println("Database update failed: " + e.getMessage());
      }
    }
  }

  private static void updateDatabase(String loanId, Loan loan) throws SQLException {
    boolean exists = false;
    // SQL query to count the number of rows in the Loan table where the LoanId matches a specified
    // value.
    String checkSql = "SELECT COUNT(*) FROM Loan WHERE LoanID = ?";

    // Check if LoanId exists. If it does exist, we update the customer.
    if (loanId != null) {
      try (Connection connection = Instance.getDatabaseConnection();
          PreparedStatement checkStatement = connection.prepareStatement(checkSql)) {
        // This parameter replaces the '?' placeholder in the checkSql query.
        checkStatement.setString(1, loanId);
        // Execute the query, and goes to the first row. We then use getInt() to check if the
        // count of rows that match our loanId is greater than 0.
        try (ResultSet resultSet = checkStatement.executeQuery()) {
          if (resultSet.next()) {
            exists = resultSet.getInt(1) > 0;
          }
        }
      }
    }

    String sql;
    // Update parameter only if a new value is provided; otherwise, keep the existing value.
    if (exists) {
      sql =
          "UPDATE Loan SET "
              + "CustomerName = COALESCE(?, CustomerName), "
              + "Status = COALESCE(?, Status), "
              + "Principal = COALESCE(?, Principal), "
              + "RateValue = COALESCE(?, RateValue), "
              + "RateType = COALESCE(?, RateType), "
              + "StartDate = COALESCE(?, StartDate), "
              + "Period = COALESCE(?, Period), "
              + "Term = COALESCE(?, Term), "
              + "PaymentAmount = COALESCE(?, PaymentAmount), "
              + "PaymentFrequency = COALESCE(?, PaymentFrequency), "
              + "Compounding = COALESCE(?, Compounding) "
              + "WHERE CustomerID = ? AND LoanID = ?";
    } else {
      sql =
          "INSERT INTO Loan (CustomerName, Status, Principal, RateValue, RateType, StartDate,"
              + " Period, Term, PaymentAmount, PaymentFrequency, Compounding, CustomerID, LoanID)"
              + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    }

    // PreparedStatement prepares an SQL statement for execution. We then obtain the auto generated
    // incremented
    // key value.
    try (Connection connection = DriverManager.getConnection("jdbc:sqlite:database.sqlite");
        PreparedStatement statement =
            connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
      statement.setString(1, loan.getCustomerName());
      statement.setString(2, loan.getStatus());
      statement.setDouble(3, loan.getPrincipal());
      statement.setDouble(4, loan.getRateValue());
      statement.setString(5, loan.getRateType().toString());
      statement.setObject(6, loan.getStartDate());
      statement.setInt(7, loan.getPeriod());
      statement.setInt(8, loan.getTerm());
      statement.setDouble(9, loan.getPaymentAmount());
      statement.setString(10, loan.getPaymentFrequency().toString());
      statement.setString(11, loan.getCompounding().toString());
      statement.setString(12, loan.getCustomerId());
      statement.setString(13, loanId);

      // Now that we have filled in our SQL query, execute it
      statement.executeUpdate();

      // Set the loanId of the loan object we passed into, to be the autogenerated one.
      if (!exists) {
        try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            loanId = generatedKeys.getString(1);
          }
        }
      }
      loan.setLoanId(loanId);
    }
  }

  private static String updateMainframe(String loanId, Loan loan) throws Exception {
    UpdateLoan updateLoan = new UpdateLoan();
    UpdateLoanStatus updateLoanStatus = new UpdateLoanStatus();
    updateLoan.setLoanId(loanId);
    // If we are updating an existing loan
    if (loanId != null) {
      Loan existingLoan = LoanLoader.loadData(loanId);

      // Update the loan with provided information. If it is null, keep the original attribute
      // values.
      updateLoan.setCustomerId(
          loan.getCustomerId() != null ? loan.getCustomerId() : existingLoan.getCustomerId());
      updateLoan.setPrincipal(
          loan.getPrincipal() != null ? loan.getPrincipal() : existingLoan.getPrincipal());
      updateLoan.setRateValue(
          loan.getRateValue() != null ? loan.getRateValue() : existingLoan.getRateValue());
      updateLoan.setRateType(
          loan.getRateType() != null ? loan.getRateType() : existingLoan.getRateType());
      updateLoan.setStartDate(
          loan.getStartDate() != null ? loan.getStartDate() : existingLoan.getStartDate());
      updateLoan.setPeriod(loan.getPeriod() != null ? loan.getPeriod() : existingLoan.getPeriod());
      updateLoan.setTerm(loan.getTerm() != null ? loan.getTerm() : existingLoan.getTerm());
      updateLoan.setPaymentAmount(
          loan.getPaymentAmount() != null
              ? loan.getPaymentAmount()
              : existingLoan.getPaymentAmount());
      updateLoan.setPaymentFrequency(
          loan.getPaymentFrequency() != null
              ? loan.getPaymentFrequency()
              : existingLoan.getPaymentFrequency());
      updateLoan.setCompounding(
          loan.getCompounding() != null ? loan.getCompounding() : existingLoan.getCompounding());

      // Since this is an update to an existing loan, set the status to "Pending"
      updateLoanStatus.setStatus(LoanStatus.Pending);
      updateLoanStatus.setLoanId(loanId);
    } else {
      updateLoan.setCustomerId(loan.getCustomerId());
      updateLoan.setPrincipal(loan.getPrincipal());
      updateLoan.setRateValue(loan.getRateValue());
      updateLoan.setRateType(loan.getRateType());
      updateLoan.setStartDate(loan.getStartDate());
      updateLoan.setPeriod(loan.getPeriod());
      updateLoan.setTerm(loan.getTerm());
      updateLoan.setPaymentAmount(loan.getPaymentAmount());
      updateLoan.setPaymentFrequency(loan.getPaymentFrequency());
      updateLoan.setCompounding(loan.getCompounding());
      updateLoanStatus.setStatus(LoanStatus.Pending);
      updateLoanStatus.setLoanId(loanId);
    }

    Status status = updateLoan.send(Instance.getConnection());
    if (!status.getWasSuccessful()) {
      System.out.println(
          "Something went wrong - the Mainframe send failed! The code is " + status.getErrorCode());
      throw new Exception("Mainframe send failed");
    }
    Status status2 = updateLoanStatus.send(Instance.getConnection());
    if (!status2.getWasSuccessful()) {
      System.out.println(
          "Something went wrong - the Mainframe send failed! The code is " + status.getErrorCode());
      throw new Exception("Mainframe send failed");
    }
    // Synchronise the ID and Status across Local and Mainframe
    loan.setLoanId(updateLoan.getLoanIdFromServer());
    loan.setStatus(updateLoan.getStatusFromServer());
    return updateLoan.getLoanIdFromServer();
  }
}
