package uoa.lavs.dataoperations.loan;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import uoa.lavs.mainframe.Instance;
import uoa.lavs.mainframe.Status;
import uoa.lavs.mainframe.messages.loan.UpdateLoanCoborrower;

public class CoborrowerUpdater {

  public static void updateData(String loanId, String coborrowerId, Integer number) {
    Integer coborrowerNumber = null;
    try {
      coborrowerNumber = updateMainframe(loanId, coborrowerId, number);
    } catch (Exception e) {
      System.out.println("Mainframe update failed: " + e.getMessage());
    } finally {
      try {
        if (coborrowerNumber == null) {
          coborrowerNumber = number;
        }
        updateDatabase(loanId, coborrowerId, coborrowerNumber);
      } catch (Exception e) {
        System.out.println("Database update failed: " + e.getMessage());
      }
    }
  }

  private static void updateDatabase(String loanId, String coborrowerId, Integer number)
      throws SQLException {
    boolean exists = false;
    // SQL query to count the number of rows in the Loan table where the LoanId matches a specified
    // value.
    String checkSql = "SELECT COUNT(*) FROM Coborrower WHERE LoanID = ? AND CoborrowerID = ?";

    // Check if LoanId exists. If it does exist, we update the customer.
    if (number != null) {
      try (Connection connection = Instance.getDatabaseConnection();
          PreparedStatement checkStatement = connection.prepareStatement(checkSql)) {
        // This parameter replaces the '?' placeholder in the checkSql query.
        checkStatement.setInt(1, number);
        // Execute the query, and goes to the first row. We then use getInt() to check if the
        // count of rows that match our loanId is greater than 0.
        try (ResultSet resultSet = checkStatement.executeQuery()) {
          if (resultSet.next()) {
            exists = resultSet.getInt(1) > 0;
          }
        }
      }
    }

    String sql;
    // Update parameter only if a new value is provided; otherwise, keep the existing value.
    if (exists) {
      sql =
          "UPDATE Coborrower SET "
              + "CoborrowerID = COALESCE(?, CoborrowerID), "
              + "WHERE Number = ? AND LoanID = ?";
    } else {
      sql = "INSERT INTO Loan (CoborrowerID, Number, LoanID)" + " VALUES (?, ?, ?)";
    }

    // PreparedStatement prepares an SQL statement for execution. We then obtain the auto generated
    // incremented
    // key value.
    try (Connection connection = Instance.getDatabaseConnection();
        PreparedStatement statement =
            connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
      statement.setString(1, coborrowerId);
      statement.setInt(2, number);
      statement.setString(3, loanId);

      // Now that we have filled in our SQL query, execute it
      statement.executeUpdate();

      // Set the loanId of the loan object we passed into, to be the autogenerated one.
      if (!exists) {
        try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
          if (generatedKeys.next()) {
            loanId = generatedKeys.getString(1);
          }
        }
      }
    }
  }

  private static int updateMainframe(String loanId, String coborrowerId, Integer number)
      throws Exception {
    UpdateLoanCoborrower updateLoanCoborrower = new UpdateLoanCoborrower();

    if (number != null) {
      updateLoanCoborrower.setLoanId(loanId);
      updateLoanCoborrower.setCoborrowerId(coborrowerId);
      updateLoanCoborrower.setNumber(number);
    } else {
      updateLoanCoborrower.setLoanId(loanId);
      updateLoanCoborrower.setCoborrowerId(coborrowerId);
    }
    Status status = updateLoanCoborrower.send(Instance.getConnection());
    if (!status.getWasSuccessful()) {
      System.out.println(
          "Something went wrong - the Mainframe send failed! The code is " + status.getErrorCode());
      throw new Exception("Mainframe send failed");
    }
    return updateLoanCoborrower.getNumberFromServer();
  }
}
